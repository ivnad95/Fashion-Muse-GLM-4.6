"use client";

import React, { useState, useRef, useEffect, useCallback, useMemo } from "react";
import { useSession, signIn, signOut } from "next-auth/react";

// Utility to build a placeholder array for the results grid
function buildPreviewArray(count: number, url: string | null) {
  const n = Math.max(6, Math.trunc(Number(count)) || 0);
  // Use logo as placeholder when no image is uploaded
  const placeholderUrl = url || "/logo.png";
  return Array.from({ length: n }, () => placeholderUrl);
}

// Function to get appropriate greeting based on time of day
function getGreeting(): string {
  const hour = new Date().getHours();
  if (hour < 12) return "Good morning";
  if (hour < 18) return "Good afternoon";
  return "Good evening";
}

// --- Minimal SVG Icons ---
const HomeIcon = () => (
  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
    <polyline points="9 22 9 12 15 12 15 22"/>
  </svg>
);

const ResultsIcon = () => (
  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
    <rect x="3" y="3" width="7" height="7" rx="1"/>
    <rect x="14" y="3" width="7" height="7" rx="1"/>
    <rect x="3" y="14" width="7" height="7" rx="1"/>
    <rect x="14" y="14" width="7" height="7" rx="1"/>
  </svg>
);

const HistoryIcon = () => (
  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12 6 12 12 16 14"/>
  </svg>
);

const SettingsIcon = () => (
  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="3"/>
    <path d="M12 1v6m0 6v6m4.22-13.22l4.24 4.24M1.54 9.96l4.24 4.24m12.44 0l4.24 4.24M1.54 14.04l4.24-4.24"/>
  </svg>
);

// --- Premium Glass UI Components ---
function GlassPanel({ children, className = "", radius = 28 }: { children: React.ReactNode; className?: string; radius?: number }) {
  return (
    <div
      className={`glass-3d-surface ${className}`}
      style={{ borderRadius: `${radius}px`, position: "relative" }}
    >
      {children}
    </div>
  );
}

function GlassyTitle({ children, className = "" }: { children: React.ReactNode; className?: string }) {
  return (
    <div className={`glass-3d-surface p-4 mb-4 ${className}`} style={{ borderRadius: "20px" }}>
      <h1 className="text-white font-bold" style={{ 
        fontSize: "2.25rem", 
        fontWeight: "700", 
        lineHeight: "1.1",
        textShadow: "0 2px 4px rgba(0,0,0,0.3)"
      }}>
        {children}
      </h1>
    </div>
  );
}

function ImagePlaceholder({ size = "small" }: { size?: "small" | "medium" | "large" }) {
  const sizeClasses = {
    small: "w-16 h-16",
    medium: "w-20 h-20", 
    large: "w-24 h-24"
  };
  
  const opacityClasses = {
    small: "opacity-15",
    medium: "opacity-20",
    large: "opacity-25"
  };

  return (
    <div className="absolute inset-0 flex items-center justify-center p-4">
      <div className={`${sizeClasses[size]} ${opacityClasses[size]}`}>
        <img
          src="/logo.png"
          alt="FASHION MUSE Studio"
          className="w-full h-full object-contain"
        />
      </div>
    </div>
  );
}

// --- Helper for converting a file to the inlineData format ---
async function fileToGenerativePart(file: File) {
  const base64EncodedData = await new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      const result = (reader.result as string) || "";
      const base64 = result.split(",")[1] || "";
      resolve(base64);
    };
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: base64EncodedData, mimeType: file.type },
  };
}

// Types
interface UploadedImage {
  url: string;
  file: File;
}

type Aspect = "portrait" | "square" | "landscape";

// Utility to clamp numeric values within a range
function clamp(value: number, min: number, max: number) {
  return Math.min(Math.max(value, min), max);
}

export default function VirtualPhotoshootApp() {
  // State management
  const [tab, setTab] = useState<string>("home");
  const [selectedCount, setSelectedCount] = useState<number>(1);
  const [uploadedImage, setUploadedImage] = useState<UploadedImage | null>(null);
  const [uploading, setUploading] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [progress, setProgress] = useState<{ done: number; total: number }>({ done: 0, total: 0 });
  const [results, setResults] = useState<(string | null)[]>([]);
  const [profileName, setProfileName] = useState<string>("");
  const [profileAvatar, setProfileAvatar] = useState<string | null>(null);
  const [customApiKey, setCustomApiKey] = useState<string>("");
  const [aspect, setAspect] = useState<Aspect>("portrait");
  const [blurStrength, setBlurStrength] = useState<number>(24);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [lightboxImage, setLightboxImage] = useState<string | null>(null);
  const [greeting, setGreeting] = useState<string>(getGreeting());
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  
  // NextAuth session
  const { data: session, status } = useSession();

  // Determine aspect ratio class
  const aspectRatioClass = useMemo(() => {
    switch (aspect) {
      case "landscape":
        return "aspect-[4/3]";
      case "square":
        return "aspect-square";
      default:
        return "aspect-[3/4]";
    }
  }, [aspect]);

  // Placeholder images for results grid
  const placeholderResults = useMemo(
    () => buildPreviewArray(selectedCount, uploadedImage?.url || null),
    [selectedCount, uploadedImage]
  );

  // Cleanup object URLs
  useEffect(() => {
    return () => {
      if (uploadedImage?.url) {
        try {
          URL.revokeObjectURL(uploadedImage.url);
        } catch (_) {}
      }
    };
  }, [uploadedImage]);

  // Sync profile data with session
  useEffect(() => {
    if (session?.user) {
      setProfileName(session.user.name || "");
      setProfileAvatar(session.user.image || null);
    } else {
      setProfileName("");
      setProfileAvatar(null);
    }
  }, [session]);

  // Inject premium styles on mount
  useEffect(() => {
    const style = document.createElement("style");
    style.id = "premium-style";
    style.innerHTML = `
      :root {
        --bg-color: #0A133B;
        --light-color1: #002857;
        --light-color2: #004b93;
        --light-color3: #0A76AF;
        --silver-light: #F5F7FA;
        --silver-mid: #C8CDD5;
        --silver-dark: #8A92A0;
        --silver-glow: rgba(200, 205, 213, 0.4);
        --shadow-color: rgba(0,0,0,0.5);
        --glass-blur: 24px;
      }
      .phone {
        position: relative;
        width: 375px;
        height: 812px;
        background: linear-gradient(135deg, var(--light-color1), var(--light-color2), var(--light-color1));
        border-radius: 54px;
        box-shadow: 0 20px 60px -10px rgba(0,0,0,0.7), inset 0 2px 4px rgba(255,255,255,0.02);
        border: 1px solid rgba(200, 205, 213, 0.2);
        overflow: hidden;
      }
      .phone-shimmer-bg {
        position: absolute;
        inset: 0;
        border-radius: 54px;
        background: linear-gradient(-45deg,
          rgba(4, 30, 66, 0.3),
          rgba(31, 85, 139, 0.4),
          rgba(4, 30, 66, 0.3),
          rgba(12, 36, 84, 0.5)
        );
        background-size: 600% 600%;
        animation: silver-shimmer 18s ease infinite;
        opacity: 0.45;
      }
      @keyframes silver-shimmer {
        0%{background-position:0% 50%}
        50%{background-position:100% 50%}
        100%{background-position:0% 50%}
      }
      .screen-content {
        padding: 20px 24px 100px; height: 100%; overflow-y: auto;
        -ms-overflow-style: none; scrollbar-width: none;
      }
      .screen-content::-webkit-scrollbar { display: none; }
      .image-container { border-radius: inherit; overflow: hidden; }

      .glass-3d-surface {
        position: relative;
        background: linear-gradient(145deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.01));
        backdrop-filter: blur(var(--glass-blur)) saturate(120%);
        -webkit-backdrop-filter: blur(var(--glass-blur)) saturate(120%);
        box-shadow:
          inset 0 2px 2px 0 rgba(255,255,255,0.1),
          inset 0 -2px 2px 0 rgba(0,0,0,0.4),
          0 15px 35px var(--shadow-color);
      }

      .glass-3d-button {
        position: relative; cursor: pointer;
        color: var(--silver-mid);
        background:
          radial-gradient(circle at 50% 40%, rgba(255,255,255,0.15) 0%, rgba(255,255,255,0) 50%),
          linear-gradient(180deg, rgba(255,255,255,0.06) 0%, rgba(255,255,255,0.01) 100%);
        box-shadow:
          inset 0 2px 1px 0 rgba(255,255,255,0.15),
          inset 0 -3px 2px 0 rgba(0,0,0,0.5),
          0 8px 15px var(--shadow-color);
        transition: all 0.1s ease-out;
      }
      .glass-3d-button::before {
        content: '';
        position: absolute;
        top: 10%; left: 10%; width: 80%; height: 40%;
        background: linear-gradient(160deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
        border-radius: 50% / 100%;
        transform: rotate(-10deg) skewX(-15deg);
        filter: blur(2px); opacity: 0.7;
      }
      .glass-3d-button:hover {
        transform: translateY(-3px) scale(1.02);
        color: var(--silver-light);
        box-shadow:
          inset 0 2px 1px 0 rgba(255,255,255,0.2),
          inset 0 -3px 2px 0 rgba(0,0,0,0.5),
          0 12px 25px var(--shadow-color);
      }
      .glass-3d-button:active, .glass-3d-button.active {
        transform: scale(0.96) translateY(2px);
        color: var(--silver-light);
        background: linear-gradient(180deg, rgba(0,0,0,0.2) 0%, transparent 100%);
        box-shadow:
          inset 0 5px 8px rgba(0,0,0,0.7),
          inset 0 -1px 1px rgba(255,255,255,0.2);
        text-shadow: 0 0 12px var(--silver-glow);
      }
      .glass-3d-button:disabled {
        opacity: 0.5; cursor: not-allowed;
        transform: none;
        box-shadow:
          inset 0 2px 2px rgba(128,128,128,0.2),
          inset 0 -2px 3px rgba(0,0,0,0.4);
      }
      .button-text {
        font-weight: 600; text-shadow: 0 1px 2px var(--shadow-color);
      }
      .number-chip {
        width: 40px; height: 40px; border-radius: 50%;
        display: flex; align-items: center; justify-content: center;
      }
      .number-chip.active {
        background: linear-gradient(135deg, var(--silver-dark), var(--silver-light));
        text-shadow: none;
      }
      .number-chip.active .button-text { color: #333; }
      .primary-button { height: 50px; border-radius: 25px; }
      .primary-button .button-text { font-size: 1.125rem; }
      .sparkle-button { width: 60px; height: 60px; border-radius: 30px; }

      .delete-button {
        padding: 8px 16px; border-radius: 20px;
        background-color: rgba(255, 80, 80, 0.15);
        box-shadow:
          inset 0 2px 1px 0 rgba(255,150,150,0.15),
          inset 0 -3px 2px 0 rgba(100,0,0,0.5),
          0 8px 15px rgba(100,0,0,0.3);
      }
      .delete-button .button-text { color: rgba(255, 150, 150, 1); }
      .delete-button:hover { background-color: rgba(255, 80, 80, 0.25); }
      .delete-button:hover .button-text { color: #fff; }
      .bottom-nav {
        height: 80px; border-radius: 40px;
        display: flex; justify-content: space-around; align-items: center;
        position: absolute; bottom: 16px; left: 16px; right: 16px;
      }
      .nav-button {
        width: 56px; height: 56px; border-radius: 50%;
        display: flex; align-items: center; justify-content: center;
      }
      .loading-dots { display: flex; justify-content: center; align-items: center; }
      .loading-dots div { width: 8px; height: 8px; margin: 0 4px; background-color: var(--silver-mid); border-radius: 50%; animation: bounce 1.4s infinite ease-in-out both; }
      .loading-dots div:nth-child(1) { animation-delay: -0.32s; }
      .loading-dots div:nth-child(2) { animation-delay: -0.16s; }
      @keyframes bounce { 0%, 80%, 100% { transform: scale(0); } 40% { transform: scale(1.0); } }
      .loading-pulse {
        position:absolute; inset:0; display:flex; align-items:center; justify-content:center;
        background: rgba(0,0,0,0.5);
      }
      .loading-pulse::before {
        content:""; width: 48px; height: 48px; border-radius: 50%;
        border: 4px solid rgba(200,205,213,0.2);
        border-top-color: var(--silver-mid);
        animation: spin 1s linear infinite;
      }
      @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
      .loader {
        border: 4px solid rgba(255,255,255,0.1);
        border-top: 4px solid var(--silver-mid);
        border-radius: 50%;
        width: 32px;
        height: 32px;
        animation: spin 1s linear infinite;
      }
      .animation-delay-150 {
        animation-delay: 150ms;
      }
      .fade-in {
        animation: fadeIn 0.5s ease-in;
      }
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
    `;
    document.head.appendChild(style);

    return () => {
      const el = document.getElementById("premium-style");
      if (el) el.remove();
    };
  }, []);

  // File handling
  const triggerFileInput = useCallback(() => {
    fileInputRef.current?.click();
  }, []);

  const handleImageUpload = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (!file) return;
      setUploading(true);
      if (uploadedImage?.url) {
        try { URL.revokeObjectURL(uploadedImage.url); } catch (_) {}
      }
      const url = URL.createObjectURL(file);
      setUploadedImage({ url, file });
      setErrorMessage(null);
      if (e.target) {
        try { (e.target as HTMLInputElement).value = ""; } catch (_) {}
      }
      setTimeout(() => setUploading(false), 500);
    },
    [uploadedImage]
  );

  // Helper: parse image data from API response
  function safeFindImageData(candidate: any): string | null {
    if (!candidate) return null;
    const partWithInline = candidate?.content?.parts?.find((p: any) => p?.inlineData);
    if (partWithInline && partWithInline.inlineData?.data) {
      const mimeType = partWithInline.inlineData.mimeType || "image/png";
      return `data:${mimeType};base64,${partWithInline.inlineData.data}`;
    }
    const partWithMedia = candidate?.content?.parts?.find((p: any) => p?.media);
    if (partWithMedia && partWithMedia.media?.data) {
      const mimeType = partWithMedia.media.mimeType || "image/png";
      return `data:${mimeType};base64,${partWithMedia.media.data}`;
    }
    return null;
  }

  // Main generation function
  const generateImages = useCallback(async () => {
    if (!uploadedImage?.file) {
      setErrorMessage("Please upload an image first.");
      return;
    }
    
    // Reset previous results and switch to results page immediately
    setResults(Array(selectedCount).fill(null));
    setLoading(true);
    setErrorMessage(null);
    setProgress({ done: 0, total: selectedCount });
    
    // Switch to results page immediately to show loading animations
    setTab("results");

    try {
      // Convert file to base64
      const imagePart = await fileToGenerativePart(uploadedImage.file!);
      const base64Data = imagePart.inlineData.data;
      
      // Get API key - prioritize authenticated users
      let apiKey = "";
      let useUserAccount = false;
      
      if (session) {
        // For authenticated users, we'll use their Google account
        useUserAccount = true;
        console.log('Using authenticated Google account for API access');
      } else {
        // For non-authenticated users, use manual API key
        apiKey = customApiKey;
        if (!apiKey) {
          apiKey = localStorage.getItem("virtualPhotoshoot.customApiKey") || "";
        }
        
        if (!apiKey) {
          throw new Error("Please set your Gemini API key in Settings first or sign in with Google.");
        }
      }
      
      console.log('Starting generation with Gemini 2.5 Flash...');
      console.log('Number of images:', selectedCount);
      console.log('Using authenticated account:', useUserAccount);
      console.log('API Key provided:', !!apiKey);
      
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          image: base64Data,
          numberOfImages: selectedCount,
          apiKey: apiKey,
          useUserAccount: useUserAccount,
          userId: session?.user?.email || 'anonymous'
        })
      });

      if (!response.ok) {
        const text = await response.text();
        throw new Error(`API error ${response.status}: ${text}`);
      }

      const data = await response.json();
      console.log('API Response:', data);

      if (data.success && data.results) {
        // Process the results and update the UI
        const resultsArray = Array(selectedCount).fill(null);
        
        // Place successful images in their correct positions
        data.results.successful.forEach((result: any) => {
          resultsArray[result.index] = result.imageUrl;
        });

        // Update progress for all images (both successful and failed)
        setProgress({ done: selectedCount, total: selectedCount });
        setResults(resultsArray);

        // Show error message if some images failed
        if (data.results.failed.length > 0) {
          const failedNames = data.results.failed.map((f: any) => f.name).join(', ');
          setErrorMessage(`Some images failed to generate: ${failedNames}`);
        }
      } else {
        throw new Error(data.error || 'Unknown error occurred');
      }
    } catch (err: any) {
      console.error('Generation error:', err);
      setErrorMessage(err?.message || "Generation error");
      setProgress({ done: selectedCount, total: selectedCount });
    } finally {
      setLoading(false);
    }
  }, [selectedCount, uploadedImage, customApiKey]);

  // Settings handlers
  const handleAvatarChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      setProfileAvatar(reader.result as string);
    };
    reader.readAsDataURL(file);
  }, []);

  const saveSettings = useCallback(() => {
    localStorage.setItem("virtualPhotoshoot.profileName", profileName);
    if (profileAvatar) localStorage.setItem("virtualPhotoshoot.profileAvatar", profileAvatar);
    if (customApiKey) localStorage.setItem("virtualPhotoshoot.customApiKey", customApiKey);
    alert("Settings saved. Reload the page to see updated name/avatar.");
  }, [profileName, profileAvatar, customApiKey]);

  // Load saved settings
  useEffect(() => {
    try {
      const name = localStorage.getItem("virtualPhotoshoot.profileName");
      const avatar = localStorage.getItem("virtualPhotoshoot.profileAvatar");
      const apiKey = localStorage.getItem("virtualPhotoshoot.customApiKey");
      if (name) setProfileName(name);
      if (avatar) setProfileAvatar(avatar);
      if (apiKey) setCustomApiKey(apiKey);
    } catch (_) {}
  }, []);

  // Update CSS variable for blur strength
  useEffect(() => {
    try {
      document.documentElement.style.setProperty("--glass-blur", `${blurStrength}px`);
    } catch (_) {}
  }, [blurStrength]);

  // Update greeting based on time of day
  useEffect(() => {
    const updateGreeting = () => {
      setGreeting(getGreeting());
    };

    // Update immediately
    updateGreeting();

    // Update every minute to catch time changes
    const interval = setInterval(updateGreeting, 60000);

    return () => clearInterval(interval);
  }, []);

  // Update greeting when profile name changes (to trigger re-render)
  useEffect(() => {
    // This effect runs when profileName changes, ensuring the greeting displays the updated name
  }, [profileName]);

  // Screen components
  const HomeScreen = () => (
    <div className="screen-content">
      <GlassyTitle>
        {greeting}, {profileName || 'Muse'}
      </GlassyTitle>
      <div className="flex gap-2 mb-4">
        {[1, 2, 4, 6, 8].map((n) => (
          <button
            key={n}
            onClick={() => setSelectedCount(n)}
            className={`glass-3d-button number-chip ${selectedCount === n ? 'active' : ''}`}
          >
            <span className="button-text">{n}</span>
          </button>
        ))}
      </div>
      <GlassPanel className={`w-full aspect-[4/5] mb-4`} radius={20}>
        <div className="absolute inset-0 image-container cursor-pointer" onClick={triggerFileInput}>
          {uploadedImage ? (
            <img src={uploadedImage.url} alt="Uploaded preview" className="object-cover w-full h-full" />
          ) : (
            <div className="flex flex-col items-center justify-center h-full">
              <div className="w-20 h-20 mb-3 opacity-30">
                <img
                  src="/logo.png"
                  alt="FASHION MUSE Studio"
                  className="w-full h-full object-contain"
                />
              </div>
              <p className="text-gray-400 text-sm font-medium">Tap to upload your photo</p>
              <p className="text-gray-500 text-xs mt-1">Start your fashion transformation</p>
            </div>
          )}
          {uploading && <div className="loading-pulse" />}
        </div>
      </GlassPanel>
      <button
        className="glass-3d-button primary-button w-full"
        onClick={generateImages}
        disabled={loading || !uploadedImage}
      >
        <span className="button-text">Generate Photoshoot</span>
      </button>
      {errorMessage && (
        <GlassPanel className="w-full mt-3 p-3" radius={16}>
          <p className="text-red-400 text-center text-xs">{errorMessage}</p>
        </GlassPanel>
      )}
    </div>
  );

  const ResultsScreen = () => {
    const displayImages = results.length ? results : placeholderResults;
    console.log('ResultsScreen - results:', results);
    console.log('ResultsScreen - displayImages:', displayImages);
    console.log('ResultsScreen - loading:', loading);
    
    return (
      <div className="screen-content fade-in">
        <GlassyTitle>Results</GlassyTitle>
        {loading && (
          <GlassPanel className="w-full p-6 mb-4" radius={20}>
            <div className="flex flex-col items-center">
              <div className="w-16 h-16 mb-4 opacity-40">
                <img
                  src="/logo.png"
                  alt="FASHION MUSE Studio"
                  className="w-full h-full object-contain animate-pulse"
                />
              </div>
              <div className="flex space-x-2 mb-3">
                <div className="w-3 h-3 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                <div className="w-3 h-3 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                <div className="w-3 h-3 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
              </div>
              <p className="text-gray-300 text-center text-sm font-medium">
                Creating your fashion photos...
              </p>
              <p className="text-gray-400 text-center text-xs mt-1">
                {progress.done} of {progress.total} images ready
              </p>
              <div className="w-full bg-gray-700 rounded-full h-2 mt-3">
                <div 
                  className="bg-gradient-to-r from-blue-400 to-purple-500 h-2 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${(progress.done / progress.total) * 100}%` }}
                ></div>
              </div>
            </div>
          </GlassPanel>
        )}
        <div className="grid grid-cols-2 gap-4">
          {displayImages.map((img, i) => (
            <GlassPanel key={i} className={`w-full ${aspectRatioClass}`} radius={20}>
              <div className="absolute inset-0 image-container">
                {img ? (
                  <div className="relative group w-full h-full">
                    <img
                      src={img}
                      alt={`Result ${i + 1}`}
                      className="object-cover w-full h-full rounded-lg cursor-pointer"
                      onClick={() => setLightboxImage(img)}
                      onLoad={() => console.log(`Image ${i + 1} loaded successfully`)}
                      onError={(e) => console.error(`Image ${i + 1} failed to load:`, e)}
                    />
                    <div className="absolute inset-0 bg-black bg-opacity-60 opacity-0 group-hover:opacity-100 flex items-center justify-center gap-4 rounded-lg transition-opacity">
                      <button
                        className="text-white hover:text-blue-400 transition-colors"
                        onClick={() => setLightboxImage(img)}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                      </button>
                      <button
                        className="text-white hover:text-blue-400 transition-colors"
                        onClick={(e) => {
                          e.stopPropagation();
                          const link = document.createElement('a');
                          link.href = img;
                          link.download = `fashion-muse-${i + 1}.png`;
                          document.body.appendChild(link);
                          link.click();
                          document.body.removeChild(link);
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                        </svg>
                      </button>
                    </div>
                  </div>
                ) : loading ? (
                  <div className="flex flex-col items-center justify-center h-full">
                    <div className="relative">
                      <div className="w-8 h-8 border-2 border-gray-600 border-t-blue-400 rounded-full animate-spin"></div>
                      <div className="absolute inset-0 w-8 h-8 border-2 border-transparent border-b-purple-400 rounded-full animate-spin animation-delay-150"></div>
                    </div>
                    <p className="text-gray-400 text-xs mt-2">Generating...</p>
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-full">
                    <ImagePlaceholder size="medium" />
                  </div>
                )}
              </div>
            </GlassPanel>
          ))}
        </div>
        {!loading && results.length > 0 && results.every(img => img !== null) && (
          <GlassPanel className="w-full p-4 mb-4" radius={20}>
            <div className="flex items-center justify-center">
              <div className="flex items-center text-green-400">
                <div className="w-8 h-8 mr-3 opacity-60">
                  <img
                    src="/logo.png"
                    alt="FASHION MUSE Studio"
                    className="w-full h-full object-contain"
                  />
                </div>
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span className="text-sm font-medium">Your fashion photos are ready!</span>
              </div>
            </div>
          </GlassPanel>
        )}
        {errorMessage && (
          <GlassPanel className="w-full mt-4 p-4" radius={20}>
            <p className="text-red-400 text-center text-sm">{errorMessage}</p>
          </GlassPanel>
        )}
      </div>
    );
  };

  const HistoryScreen = () => (
    <div className="screen-content">
      <GlassyTitle>History</GlassyTitle>
      <GlassPanel className={`w-full ${aspectRatioClass}`} radius={24}>
        <div className="absolute inset-0 image-container">
          {uploadedImage ? (
            <img src={uploadedImage.url} alt="Previously generated" className="object-cover w-full h-full" />
          ) : (
            <ImagePlaceholder size="large" />
          )}
        </div>
      </GlassPanel>
    </div>
  );

  const SettingsScreen = () => (
    <div className="screen-content space-y-6">
      <GlassyTitle>Settings</GlassyTitle>
      
      {/* Authentication Section */}
      <GlassPanel className="w-full p-4" radius={24}>
        <h3 className="text-white font-semibold mb-4">Account</h3>
        {status === 'loading' ? (
          <div className="flex items-center justify-center py-4">
            <div className="loader"></div>
          </div>
        ) : session ? (
          <div className="space-y-4">
            <div className="flex items-center gap-4">
              {session.user?.image ? (
                <img src={session.user.image} alt="Profile" className="w-16 h-16 rounded-full object-cover" />
              ) : (
                <div className="w-16 h-16 rounded-full bg-gray-700 flex items-center justify-center text-xl text-gray-400">
                  <span>{session.user?.name?.charAt(0).toUpperCase() || 'U'}</span>
                </div>
              )}
              <div className="flex-grow">
                <p className="text-white font-medium">{session.user?.name}</p>
                <p className="text-gray-400 text-sm">{session.user?.email}</p>
              </div>
            </div>
            <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-3">
              <p className="text-green-400 text-sm">
                ✓ Signed in with Google - Using your Gemini API key automatically
              </p>
            </div>
            <button 
              className="glass-3d-button delete-button w-full"
              onClick={() => signOut()}
            >
              <span className="button-text">Sign Out</span>
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-yellow-500/20 border border-yellow-500/50 rounded-lg p-3">
              <p className="text-yellow-400 text-sm mb-2">
                Sign in with Google to automatically use your Gemini API key
              </p>
              <p className="text-gray-400 text-xs">
                No manual API key configuration needed
              </p>
            </div>
            <button 
              className="glass-3d-button primary-button w-full flex items-center justify-center gap-2"
              onClick={() => signIn('google')}
            >
              <svg className="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span className="button-text">Sign in with Google</span>
            </button>
          </div>
        )}
      </GlassPanel>

      {/* Manual API Key Section (shown only when not signed in) */}
      {!session && (
        <GlassPanel className="w-full p-4" radius={24}>
          <h3 className="text-white font-semibold mb-4">Manual API Key Setup</h3>
          <div className="space-y-4">
            <div>
              <label className="text-gray-300/80 text-sm mb-1">Gemini API Key</label>
              <input
                className="glass-3d-button px-3 py-2 rounded-md text-gray-900 bg-white/80 focus:outline-none w-full"
                placeholder="Enter your Gemini API key"
                value={customApiKey}
                onChange={(e) => setCustomApiKey(e.target.value)}
                type="password"
              />
              <p className="text-gray-400 text-xs mt-1">
                Get your key from: <span className="text-blue-400">makersuite.google.com/app/apikey</span>
              </p>
              <p className="text-gray-400 text-xs mt-1">
                Required for image generation. Your requests will be billed to your account.
              </p>
            </div>
          </div>
        </GlassPanel>
      )}

      {/* Profile Settings (shown only when signed in) */}
      {session && (
        <GlassPanel className="w-full p-4" radius={24}>
          <h3 className="text-white font-semibold mb-4">Profile Settings</h3>
          <div className="flex flex-col gap-4">
            <div>
              <label className="text-gray-300/80 text-sm mb-1">Display Name</label>
              <input
                className="glass-3d-button px-3 py-2 rounded-md text-gray-900 bg-white/80 focus:outline-none"
                placeholder="Enter your name"
                value={profileName}
                onChange={(e) => setProfileName(e.target.value)}
              />
            </div>
            <div>
              <label className="text-gray-300/80 text-sm mb-1">Aspect Ratio</label>
              <select
                className="glass-3d-button px-3 py-2 rounded-md bg-white/80 text-gray-900 w-full"
                value={aspect}
                onChange={(e) => setAspect(e.target.value as Aspect)}
              >
                <option value="portrait">Portrait (3/4)</option>
                <option value="square">Square (1/1)</option>
                <option value="landscape">Landscape (4/3)</option>
              </select>
            </div>
            <div className="flex flex-col">
              <label className="text-gray-300/80 text-sm mb-1">Glass Blur (10–50px)</label>
              <input
                type="range"
                min="10"
                max="50"
                step="1"
                value={blurStrength}
                onChange={(e) => setBlurStrength(clamp(parseInt(e.target.value, 10), 10, 50))}
                className="w-full"
              />
              <span className="text-gray-400 text-xs mt-1">Current blur: {blurStrength}px</span>
            </div>
            <div className="flex gap-3 mt-4">
              <button className="glass-3d-button flex-1" onClick={saveSettings}>
                <span className="button-text">Save Settings</span>
              </button>
            </div>
          </div>
        </GlassPanel>
      )}
    </div>
  );

  const Lightbox = () => (
    lightboxImage ? (
      <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4" onClick={() => setLightboxImage(null)}>
        <div className="relative" onClick={(e) => e.stopPropagation()}>
          <img src={lightboxImage} className="max-w-[90vw] max-h-[90vh] object-contain rounded-lg shadow-2xl" alt="Lightbox" />
          <button
            onClick={() => setLightboxImage(null)}
            className="absolute -top-2 -right-2 text-white bg-gray-800 rounded-full h-8 w-8 flex items-center justify-center text-2xl font-bold hover:bg-gray-700"
          >
            &times;
          </button>
        </div>
      </div>
    ) : null
  );

  const BottomNavBar = () => {
    const navItems = [
      { id: 'home', icon: <HomeIcon /> },
      { id: 'results', icon: <ResultsIcon /> },
      { id: 'history', icon: <HistoryIcon /> },
      { id: 'settings', icon: <SettingsIcon /> },
    ];
    return (
      <nav className="bottom-nav">
        {navItems.map((item) => (
          <button
            key={item.id}
            onClick={() => setTab(item.id)}
            className={`glass-3d-button nav-button ${tab === item.id ? 'active' : ''}`}
          >
            {item.icon}
          </button>
        ))}
      </nav>
    );
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-black relative">
      <div className="phone">
        <div className="phone-shimmer-bg" />
        {tab === 'home' && <HomeScreen />}
        {tab === 'results' && <ResultsScreen />}
        {tab === 'history' && <HistoryScreen />}
        {tab === 'settings' && <SettingsScreen />}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          className="hidden"
          onChange={handleImageUpload}
        />
        <BottomNavBar />
        <Lightbox />
      </div>
    </div>
  );
}
